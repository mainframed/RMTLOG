*---------------------------------------------------------------------*
* RMTLOG  - MVS Remote Syslog Facility.                               *
*---------------------------------------------------------------------*
* RLINIT2 - Initialization.                                           *
*---------------------------------------------------------------------*
* Entry (Called by RMTLOG):                                           *
* - R11 - Points to common storage area.  Use this for base reg.      *
* Regs:                                                               *
* - R12 - Base register for this program.                             *
* - R13 - Points to private storage area.                             *
*---------------------------------------------------------------------*
* 1) Get hostname of SERVER specified in PARMS file.                  *
* 2) Initialize TCPIP environment.                                    *
* 3) Get socket.                                                      *
* 4) Get local hostname.                                              *
*---------------------------------------------------------------------*
* 06/01/2010 John C. Miller - software@jmit.com                       *
*---------------------------------------------------------------------*
*
*=====================================================================*
* RMTLOG Remote logging program copyright 2010-2017 John C. Miller.   *
*---------------------------------------------------------------------*
* This program is free software: you can redistribute it and/or       *
* modify it under the terms of the GNU General Public License as      *
* published by the Free Software Foundation, either version 3 of      *
* the License, or (at your option) any later version.                 *
*                                                                     *
* This program is distributed in the hope that it will be useful,     *
* but WITHOUT ANY WARRANTY; without even the implied warranty of      *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
* GNU General Public License in member $GPL for more details.         *
*---------------------------------------------------------------------*
         GBLB  &NODEBUG
&NODEBUG SETB  0
         PRINT GEN,DATA
RLINIT2  CSECT
RLINIT2  AMODE ANY
RLINIT2  RMODE ANY
         YREGS
*---------------------------------------------------------------------*
* Prolog - Get private and common areas, and get set up.
*---------------------------------------------------------------------*
         BAKR  R14,0                Save caller env.
         LR    R12,R15              Load base reg.
         USING RLINIT2,R12          "
         MODID ,                    Eyecatcher.
         LR    R2,R1                Save R1 contents.
         STORAGE OBTAIN,LENGTH=DYNL Obtain private work area.
         LR    R13,R1               Load base reg.
         USING DATD,R13             DSECT addressability
         MVC   4(4,R13),=C'F1SA'    Indicate Fmt1 save area.
         USING RLCOMM,R11           Addressability to common area.
         LR    R1,R2                Restore original R1.
         ST    R1,R1SAVE            Save R1.
         MVI   CC,0                 Start with zero CC.
*---------------------------------------------------------------------*
* Parms can contain either SERVER or SERVERIP to identify the target  *
* syslogd server--but only one of these two parms can be coded.       *
* If SERVER was coded, then do a lookup on hosname to get IP.         *
* If SERVERIP was coded, then call IPADDR module to convert str->IP.  *
*---------------------------------------------------------------------*
         TM    SERVFLG,$SERVNAM     SERVER specified?
         BO    GETHOST              Yes, go do host lookup.
         MVC   IPSTRING,SERVERIP    Copy ipadd string to work var.
         CALL  IPADDR,(IPSTRING),MF=(E,PARMLIST)
         L     R1,IPSTRING          Load converted IPADDR from 1st wrd.
         ST    R1,SERVER#           Store it in parms for connect.
         B     INITAPI              Continue.
*---------------------------------------------------------------------*
* GETHOSTBYNAME - Get ip address of target host name.                 *
*---------------------------------------------------------------------*
GETHOST  DS    0H
         STR   LENG,SERVER,79      Get length of string.
         ST    R1,NAMELEN          Store length of string.
         EZASMI TYPE=GETHOSTBYNAME,                                    X
               HOSTENT=HOSTENT,                                        X
               RETCODE=RETCODE,                                        X
               NAMELEN=NAMELEN,                                        X
               NAME=SERVER
         CLC   RETCODE,MINUSONE    Operation fail?
         BNE   GETHOSTX            No, continue.
         B     EXIT8               ... and go to exit rtn.
GETHOSTX DS    0H
         L     R5,HOSTENT          -> HOSTENT structure.
         L     R5,16(R5)           -> IP address list.
         L     R5,0(R5)            -> 1st IP address.
         L     R5,0(R5)            Load 1st IP address content.
         ST    R5,SERVER#          Save server IP address.
*---------------------------------------------------------------------*
* INITAPI - Connect to socket interface.                              *
*---------------------------------------------------------------------*
INITAPI  DS    0H
         EZASMI TYPE=INITAPI,      ISSUE INITAPI MACRO                 X
               SUBTASK=SUBTASK,    SPECIFY SUBTASK IDENTIFIER          X
               MAXSOC=MAXSOC,      SPECIFY MAXIMUM NUMBER OF SOCKETS   X
               MAXSNO=MAXSNO,      (HIGHEST SOCKET NUMBER ASSIGNED)    X
               ERRNO=ERRNO,        (Specify ERRNO field)               X
               RETCODE=RETCODE,    (Specify RETCODE field)             X
               APITYPE=APITYPE,    (SPECIFY APITYPE FIELD)             X
               ASYNC='NO',         Specify synchronous mode.           X
               ERROR=ERROR         Abend if error on macro
         CLC   RETCODE,MINUSONE    Operation fail?
         BNE   SOCKET              No, do next step.
         CLC   ERRNO,=F'10197'     Already initialized?
         BE    SOCKET              Yes, that's ok.  Keep going.
         LA    R1,MINITAPI         -> message.
         BAL   R14,MSG
         B     EXIT8               Go to exit rtn.
*---------------------*
* INITAPI macro parms *
*---------------------*
SUBTASK  DC    CL8'RMTLOG'        SUBTASK PARM VALUE
MAXSOC   DC    AL2(50)            MAXSOC PARM VALUE
APITYPE  DC    H'2'               2 = 1 socket.  3 = many sockets.
*---------------------------------------------------------------------*
* Obtain a TCP or UDP socket descriptor, depending on the PROTO parm. *
*---------------------------------------------------------------------*
SOCKET   DS    0H
         CLC   =C'UDP',PROTO       UDP protocol?
         BE    SOCKETUD            Yes, get a UDP socket.
SOCKETST DS    0H                  No, get a STREAM (TCP) socket.
         LA    R1,SOCKTCP          -> Msg - TCP socket selected.
         BAL   R14,MSG             Display it.
         MVC   TYPE,MSOCKET        Move SOCKET to message.
         EZASMI TYPE=SOCKET,       Issue SOCKET macro.                 X
               AF='INET',          INET socket.                        X
               SOCTYPE='STREAM',   STREAM for TCP socket.              X
               ERRNO=ERRNO,        ERRNO output field.                 X
               RETCODE=RETCODE,    RETCODE output field.               X
               ERROR=ERROR         Go here on exit.
         B     CHECKSOK            Go check socket success.
SOCKETUD DS    0H                  No, get a STREAM (TCP) socket.
         LA    R1,SOCKUDP          -> Msg - UDP socket selected.
         BAL   R14,MSG             Display it.
         MVC   TYPE,MSOCKET        Move SOCKET to message.
         EZASMI TYPE=SOCKET,       Issue SOCKET macro.                 X
               AF='INET',          INET socket.                        X
               SOCTYPE='DATAGRAM', DATAGRAM for UDP socket.            X
               ERRNO=ERRNO,        ERRNO output field.                 X
               RETCODE=RETCODE,    RETCODE output field.               X
               ERROR=ERROR         Go here on exit.
CHECKSOK DS    0H
         CLC   RETCODE,MINUSONE    Operation ok?
         BNE   SOCKOK              Yes, continue.
         LA    R1,MSOCKERR         -> message.
         BAL   R14,MSG
         B     EXIT8               Return with bad RC.
SOCKOK   DS    0H
         L     R8,RETCODE          Load RETCODE.
         STH   R8,S                Save socket num in comm strg.
*---------------------------------------------------------------------*
* Connect to server.                                                  *
*---------------------------------------------------------------------*
CONNECT  DS    0H
         MVC   TYPE,MCONNECT       Move 'CONNECT' to message.
         MVC   FAMILY,=H'2'        Store family in sockt addr struct.
*        MVC   PORT,=H'514'        *TST* Store port in sockt addr struc
         EZASMI TYPE=CONNECT,                                          X
               S=S,                Stream.                             X
               NAME=NAME,          Socket name structure.              X
               ERRNO=ERRNO,        (Specify ERRNO field)               X
               RETCODE=RETCODE,    (Specify RETCODE field)             X
               ERROR=ERROR         Abend if Macro error
         CLC   RETCODE,MINUSONE    Operation ok?
         BNE   CONNOK              Yes, continue.
         LA    R1,MCONNERR         -> message.
         BAL   R14,MSG
         B     EXIT8               Return with bad RC.
CONNOK   DS    0H
*---------------------------------------------------------------------*
* GETHOSTNAME - Get the host name that we're running on.  Comes from  *
* the HOSTNAME field in the TCPDATA member in use.                    *
*---------------------------------------------------------------------*
HOSTNAME DS    0H
         NOP   GETHOSNX
         MVC   HOSTNAML,=F'12'     Set length.
         EZASMI TYPE=GETHOSTNAME,  Get host name of our local host.    X
               NAMELEN=HOSTNAML,                                       X
               NAME=HOSTNAM,                                           X
               RETCODE=RETCODE,                                        X
               ERRNO=ERRNO
         CLC   RETCODE,MINUSONE    Operation fail?
         BNE   GETHOSNX            No, continue.
         LA    R1,MLOCHOST         -> Msg.
GETHOSNX DS    0H
         OC    HOSTNAM,BLANKS      Convert X'00' to X'40'
         STR   LENG,HOSTNAM,12     Get length of hostname.
         ST    R1,HOSTNAML         Save length for later MVCL.
GETHOSNY DS    0H
*---------------------------------------------------------------------*
* Other setup.                                                        *
*---------------------------------------------------------------------*
         B     EXIT
*---------------------------------------------------------------------*
* RETURN                                                              *
*---------------------------------------------------------------------*
ERROR    DS    0H
EXIT8    DS    0H
         MVI   CC,8                Set return code 8 (error).
         B     EXIT
EXIT0    DS    0H
         MVI   CC,0                Set zero (good) return code.
EXIT     DS    0H
         LR    R1,R13
         STORAGE RELEASE,LENGTH=DYNL,ADDR=(1)
         PR                        Return to caller.
*---------------------------------------------------------------------*
*  MSG - WTO a message, and write it to SYSPRINT if open.             *
*---------------------------------------------------------------------*
MSG      DS      0H
         BAKR    R14,0             Save callers environment.
         SAC     0                 Set primary mode.
         SYSSTATE ASCENV=P         Tell macros PRIMARY mode.
         MVC     WTOPL,WTOPLM      Set up parm list.
         LR      R2,R1             Point R2 to msg text passed in R1.
         WTO     TEXT=(R2),        WTO the message.                    X
               MF=(E,WTOPL)
         CLI   SYSPOK,C'Y'         OK to write to SYSPRINT?
         BNE   NOSYSP0             No, branch around.
         MVC   BUFFER,BLANKS       Clear message buffer.
         LA    R4,BUFFER           -> buffer.
         SR    R5,R5               Clear reg.
         LH    R5,0(R2)            Len of MVCL.
         LR    R7,R5               Len of MVCL.
         LA    R8,2(R2)            -> message text.
         MVCL  R4,R8
         PUT   GTEXTOUT,BUFFER     Write data to SYSPRINT.
NOSYSP0  DS    0H
         PR                        Return to caller.
*---------------------------------------------------------------------*
* MACROS and constants.                                               *
*---------------------------------------------------------------------*
SOCKTCP  DC     AL2(L'MSG32)
MSG32    DC     C'RLG032I TCP protocol selected.'
SOCKUDP  DC     AL2(L'MSG33)
MSG33    DC     C'RLG033I UDP protocol selected.'
MLOCHOST DC     AL2(L'MSG34)
MSG34    DC     C'RLG034I Unable to determine local hostname.'
MSOCKERR DC     AL2(L'MSG35)
MSG35    DC     C'RLG035I Error creating socket.'
MCONNERR DC     AL2(L'MSG36)
MSG36    DC     C'RLG036I Error connecting socket.'
MINITAPI DC     AL2(L'MSG37)
MSG37    DC     C'RLG037I Waiting for TCPIP initialization.'
*---------------------------------------------------------------------*
         LTORG
         CNOP  0,4
WTOPLM   WTO TEXT=,DESC=(7),MF=L   WTO parm list.
WTOPLL   EQU *-WTOPLM
*
RLCOMM1  RLCOMM CONST              Define RMTLOG common constants.
*---------------------------------------------------------------------*
*   Private working storage.
*---------------------------------------------------------------------*
DATD     DSECT
SAVE     DS    18F                 Register save area.
*---------------------------------------------------------------------*
*   MACRO storage.
*---------------------------------------------------------------------*
WTOPL    DS    CL(WTOPLL)          WTO parm list.
         CNOP  0,4
WRKD     DS    D                   Doubleword work area.
WRKF     DS    D                   Fullword work area.
IPSTRING DS    CL16                Workarea for IP address.
*
*---------------------------------------------------------------------*
*   End on doubleword boundary.                                       *
*---------------------------------------------------------------------*
         DS    0D
ENDDATD  EQU   *
DYNL     EQU   *-DATD
*---------------------------------------------------------------------*
*   RMTLOG Common Storage DSECT.                                      *
*---------------------------------------------------------------------*
         RLCOMM DSECT              RMTLOG command storage mmapping.
         IKJCPPL                   CPPL mapping.
         END   RLINIT2
*---------------------------------------------------------------------*
*   PUNCH the linkedit control statements here.                       *
*---------------------------------------------------------------------*
         PUNCH ' SETCODE  AC(1)        '
         PUNCH ' ENTRY    RLINIT2      '
         PUNCH ' NAME     RLINIT2(R)   '
         END
