*---------------------------------------------------------------------*
* RMTLOG  - MVS Remote Syslog Facility.                               *
*---------------------------------------------------------------------*
* RLINIT1 - Read and parse parameter file, and perform other          *
* assorted tasks.                                                     *
* This module performs tasks that must succeed immediately, or else   *
* the RMTLOG faility must quit.  This module starts with the return   *
* code (var CC) set to 0 (meaning successful).  If any fatal error    *
* occurs, then we set CC to 8, which signals the caller that we need  *
* to terminate RMTLOG.                                                *
*---------------------------------------------------------------------*
* Entry (Called by RMTLOG):                                           *
* - R11 - Points to common storage area.  Use this for base reg.      *
* Regs:                                                               *
* - R12 - Base register for this program.                             *
* - R13 - Points to private storage area.                             *
* Return Code:                                                        *
* - Variable CC = 0 ===> success                                      *
* - Variable CC = 8 ===> fail                                         *
*---------------------------------------------------------------------*
* 1) Open, parse, process, and validate the PARMS file.               *
*---------------------------------------------------------------------*
* 06/01/2010 John C. Miller - software@jmit.com                       *
* 03/22/2011 JCM - Added DCBE for 31 bit EODAD, changed dynamic strg  *
* area to LOC=24 for DCB compatibility.                               *
*---------------------------------------------------------------------*
*
*=====================================================================*
* RMTLOG Remote logging program copyright 2010-2017 John C. Miller.   *
*---------------------------------------------------------------------*
* This program is free software: you can redistribute it and/or       *
* modify it under the terms of the GNU General Public License as      *
* published by the Free Software Foundation, either version 3 of      *
* the License, or (at your option) any later version.                 *
*                                                                     *
* This program is distributed in the hope that it will be useful,     *
* but WITHOUT ANY WARRANTY; without even the implied warranty of      *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
* GNU General Public License in member $GPL for more details.         *
*---------------------------------------------------------------------*
         GBLB  &NODEBUG
&NODEBUG SETB  0
         PRINT GEN,DATA
RLINIT1  CSECT
RLINIT1  AMODE ANY
RLINIT1  RMODE ANY
         YREGS
*---------------------------------------------------------------------*
* Prolog - Get private and common areas, and get set up.
*---------------------------------------------------------------------*
         BAKR  R14,0                Save caller env.
         LR    R12,R15              Load base reg.
         USING RLINIT1,R12          "
         MODID ,                    Eyecatcher.
         LR    R2,R1                Save R1 contents.
         STORAGE OBTAIN,LENGTH=DYNL,LOC=24 Workarea below 16mb line.
         LR    R13,R1               Load base reg.
         USING DATD,R13             DSECT addressability
         MVC   4(4,R13),=C'F1SA'    Indicate Fmt1 save area.
         USING RLCOMM,R11           Addressability to common area.
         LR    R1,R2                Restore original R1.
         ST    R1,R1SAVE            Save R1.
*---------------------------------------------------------------------*
* We branch to READPARM (rather than BALR) because this code section
* has to loop until EOF on the input file, at which time the DCB
* specifies that it returns by branch to label EOF.
*---------------------------------------------------------------------*
MAIN     DS    0H
         MVI   CC,0                Start with return code 0.
         MVC   MSG21H,MSG21L       Move msg length.
         MVC   MSG21W,MSG21        Move message text to wrking strg.
         MVC   MSG21W+15(4),RLVERSN Store version in message.
         LA    R1,MSG21H           -> Msg
         BAL   R14,MSG             Display it.
         BAL   R6,SETUP            Open input file, init vars.
         CLI   CC,0                Everything ok?
         BNE   EXIT0               No, exit with error.
         B     READPARM            Yes, continue reading parms.
EOF      DS    0H                  Return from READPARM on EOF.
         BAL   R6,CKPARMS          Check parms.
*---------------------------------------------------------------------*
* Other setup.                                                        *
*---------------------------------------------------------------------*
         B     EXIT
*---------------------------------------------------------------------*
* RETURN                                                              *
*---------------------------------------------------------------------*
ERROR    DS    0H
         MVI   CC,8                Set return code 8 (error).
EXIT     DS    0H
         CLOSE MF=(E,GOPENIN)
EXIT0    DS    0H
         LR    R1,R13
         STORAGE RELEASE,LENGTH=DYNL,ADDR=(1)
         PR                        Return to caller.
*---------------------------------------------------------------------*
*  MSG - WTO a message.                                               *
*---------------------------------------------------------------------*
MSG      DS      0H
         BAKR    R14,0             Save callers environment.
         SAC     0                 Set primary mode.
         SYSSTATE ASCENV=P         Tell macros PRIMARY mode.
         MVC     WTOPL,WTOPLM      Set up parm list.
         LR      R2,R1             Point R2 to msg text passed in R1.
         WTO     TEXT=(R2),        WTO the message.                    X
               MF=(E,WTOPL)
         CLI   SYSPOK,C'Y'         OK to write to SYSPRINT?
         BNE   NOSYSP0             No, branch around.
         MVC   BUFFER,BLANKS       Clear message buffer.
         LA    R4,BUFFER           -> buffer.
         SR    R5,R5               Clear reg.
         LH    R5,0(R2)            Len of MVCL.
         LR    R7,R5               Len of MVCL.
         LA    R8,2(R2)            -> message text.
         MVCL  R4,R8
         PUT   GTEXTOUT,BUFFER     Write data to SYSPRINT.
NOSYSP0  DS    0H
         PR                        Return to caller.
*---------------------------------------------------------------------*
* Write output buffer to SYSPRINT DD statement.                       *
*---------------------------------------------------------------------*
PUTLINE  DS    0H
         BAKR    R14,0             Save callers environment.
         SAC     0                 Set primary mode.
         SYSSTATE ASCENV=P         Tell macros PRIMARY mode.
         CLI   SYSPOK,C'Y'         OK to write to SYSPRINT?
         BNE   NOSYSP1             No, branch around.
         PUT   GTEXTOUT,4(R2)      Write data to SYSPRINT.
NOSYSP1  DS    0H
         PR                        Return to caller
* Message constants.
MSG21L   DC    AL2(L'MSG21)
MSG21    DC    C'RLG021I RMTLOG:     starting initialization phase 1.'
*
OPENERR  DS    AL2(L'MSG22)
MSG22    DC    C'RLG053I Error opening parameter file.'
*
SRVBOTH  DC    AL2(L'MSG24)
MSG24    DC    C'RLG024I SERVER and SERVERIP both coded, but only one iX
               s allowed - exiting.'
*
SRVNONE  DC    AL2(L'MSG25)
MSG25    DC    C'RLG025I Neither SERVER nor SERVERIP coded, one is requX
               ired - exiting.'
*
* Messages below have a variable component, so these constants will be
* copied to working storage, and additional data added before the WTO.
* Total msg length of these dynamic message must <= 80.
*
MSG23L   DC    AL2(L'MSG23)
MSG23    DC    C'RLG023I Default value assigned for parameter:         X
                                         '
*
MSG26L   DC    AL2(L'MSG26)
MSG26    DC    C'RLG026I Parameter specified:                          X
                                         '
*
*---------------------------------------------------------------------*
* Read parameter file records.  On EOF, DCB specifies that we branch  *
* to label EOF.  Reaching EOF is the only way of branching out of     *
* this section of code.                                               *
*---------------------------------------------------------------------*
READPARM DS    0H
         BAL   R6,GETLINE          Get input record.
         CLI   BUFFER,C'*'         Comment?
         BE    READPARM            Yes, ignore this record.
         CLI   BUFFER,C'#'         Comment?
         BE    READPARM            Yes, ignore this record.
         CLC   =CL20' ',BUFFER     Blank line?
         BE    READPARM            Yes, ignore this record.
*        ---
         LA    R1,BUFFER           Point to it.
         LA    R0,79               Set length of line.
         BAL   R6,PARSE            Go parse it.
*        ---
         MVC   VERB,BLANKS         Set VERB field to blanks.
         LM    R4,R5,PWK           Load ptr and len of source of MVCL
         LR    R3,R5               Copy over len reg.
         LA    R2,VERB             Point to target of MVCL.
         MVCL  R2,R4               Move data.
*        ---
         MVC   CONTENT,BLANKS      Set target field to blanks.
         LM    R4,R5,PWK+8         Load ptr and len of source of MVCL
         LR    R3,R5               Copy over len reg.
         LA    R2,CONTENT          Point to target of MVCL.
         MVCL  R2,R4               Move data.
*        ---
* Check for SERVER statement.
*        ---
         CLC   =C'SERVER ',VERB    Was this a SERVER stmt?
         BNE   RPM0002A            No, check next.
         MVC   SERVER,CONTENT      Yes, copy content to SERVER var.
         B     RPM9999             Done, process next stmt.
*        ---
* Check for SERVER statement.
*        ---
RPM0002A DS    0H
         CLC   =C'SERVERIP',VERB  Was this a SERVERIP stmt?
         BNE   RPM0002B            No, check next.
         MVC   SERVERIP,CONTENT    Yes, copy content to SERVER var.
         B     RPM9999             Done, process next stmt.
*        ---
* Check for TIMEOUT statement.
*        ---
RPM0002B DS    0H
         CLC   =C'TIMEOUT',VERB   Was this a TIMEOUT stmt?
         BNE   RPM0003
         MVC   TIMEOUT,CONTENT     Copy content to TIMEOUT var.
         B     RPM9999
*        ---
* Check for CNAME statement.
*        ---
RPM0003  DS    0H
         CLC   =C'CNAME',VERB     CNAME stmt?
         BNE   RPM0004
         MVC   CNAME,CONTENT       Copy content to CNAME var.
         B     RPM9999
*        ---
* Check for PRI statement.
*        ---
RPM0004  DS    0H
         CLC   =C'PRI',VERB       PRI stmt?
         BNE   RPM0005
         MVC   PRI+1(3),CONTENT    Copy content to PRI var.
         MVI   PRI,C'<'
         MVI   PRI+4,C'>'
         B     RPM9999
*        ---
* Check for SIZE statement.
*        ---
RPM0005  DS    0H
         CLC   =C'SIZE',VERB      SIZE stmt?
         BNE   RPM0006
         MVC   SIZE,CONTENT        Copy content to SIZE var.
         B     RPM9999
*        ---
* Check for QLIMIT statement.
*        ---
RPM0006  DS    0H
         CLC   =C'QLIMIT',VERB    QLIMIT stmt?
         BNE   RPM0007
         MVC   QLIMITN,CONTENT     Copy content to var.
         B     RPM9999
*        ---
* Check for HOSTNAME statement.
*        ---
RPM0007  DS    0H
         CLC   =C'HOSTNAME',VERB  HOSTNM stmt?
         BNE   RPM0008
         MVC   HOSTNM,CONTENT      Copy content to var.
         STR   LENG,HOSTNM,8       Get len of string in R0
         ST    R1,HOSTNML          Save host name length.
         B     RPM9999
*        ---
* Check for PROTO statement.
*        ---
RPM0008  DS    0H
         CLC   =C'PROTO',VERB     PROTO stmt?
         BNE   RPM0009
         MVC   PROTO,CONTENT       Copy content to var.
         B     RPM9999
*        ---
* Check for PORT statement.
*        ---
RPM0009  DS    0H
         CLC   =C'PORT',VERB      PORT stmt?
         BNE   RPM0010
         MVC   PORTN,CONTENT       Copy content to var.
         B     RPM9999
*        ---
* Check for TIME statement.
*        ---
RPM0010  DS    0H
         CLC   =C'TIME',VERB      TIME stmt?
         BNE   RPM0011
         MVC   TIMESRC,CONTENT     Copy content to var.
         B     RPM9999
*        ---
* Check for RETRYINT statement.
*        ---
RPM0011  DS    0H
         CLC   =C'RETRYINT',VERB   RETRYINT stmt?
         BNE   RPM0012
         MVC   RETRYINT,CONTENT    Copy content to var.
         STR   RJUST,RETRYINT,6    Right justify the field (almost).
         OC    RETRYINT,=CL8'00000000' Force blank spaces to zeros.
         B     RPM9999
*        ---
* Check for RETRIES statement.
*        ---
RPM0012  DS    0H
         CLC   =C'RETRIES',VERB   RETRIES stmt?
         BNE   RPM0013
         MVC   RETRIES,CONTENT     Copy content to var.
         B     RPM9999
*        ---
* Check for ALERTPCT statement.
*        ---
RPM0013  DS    0H
         CLC   =C'ALERTPCT',VERB   ALERTPCT stmt?
         BNE   RPM0014
         MVC   ALERTPCT,CONTENT    Copy content to var.
         B     RPM9999
*        ---
* Check for QRESUME statement.
*        ---
RPM0014  DS    0H
         CLC   =C'QRESUME',VERB   QRESUME stmt?
         BNE   RPM0015
         MVC   QRESUME,CONTENT     Copy content to var.
         B     RPM9999
*        ---
* Check for ALERTPCT statement.
*        ---
RPM0015  DS    0H
         CLC   =C'TRACE',VERB     TRACE stmt?
         BNE   RPM0016
         MVC   TRACE,CONTENT       Copy content to var.
         B     RPM9999
RPM0016  DS    0H
RPM9999  DS    0H
         B     READPARM            Top of loop.
*
*---------------------------------------------------------------------*
* (SUBR) GETLINE - GET AN INPUT RECORD.                               *
* R14 IS RETURN REGISTER.                                             *
*---------------------------------------------------------------------*
GETLINE  DS    0H
         GET   GTEXTIN,BUFFER                   READ RECORD.
         BR    R6
*---------------------------------------------------------------------*
* SETUP.  Set variables to blanks as appropriate, and set up other
* variables.
*---------------------------------------------------------------------*
SETUP    DS    0H
         MVC   BUFFER,BLANKS          Set field to blanks.
         MVC   CNAME,BLANKS           Set field to blanks.
         MVC   ALERTPCT,BLANKS        Set field to blanks.
         MVC   TRACE,BLANKS           Set field to blanks.
         MVC   QRESUME,BLANKS         Set field to blanks.
         XC    ALERTPCT,ALERTPCT      Set field to zeros.
         XC    QRESUMEN,QRESUMEN      Set field to zeros.
         MVC   CONTENT,BLANKS         Set field to blanks.
         MVC   HOSTNM,BLANKS          Set field to blanks.
         MVC   MDBTIME,BLANKS         Set field to blanks.
         MVC   PORTN,BLANKS           Set field to blanks.
         MVC   PRI,BLANKS             Set field to blanks.
         MVC   QLIMITN,BLANKS         Set field to blanks.
         MVC   RETRIES,BLANKS         Set field to blanks.
         MVC   RETRYINT,BLANKS        Set field to blanks.
         MVC   SERVER,BLANKS          Set field to blanks.
         MVC   SERVERIP,BLANKS        Set field to blanks.
         MVC   SIZE,BLANKS            Set field to blanks.
         MVC   TIMEOUT,BLANKS         Set field to blanks.
         MVC   TIMESRC,BLANKS         Set field to blanks.
         MVC   VERB,BLANKS            Set field to blanks.
*
         MVC   WTOPL,WTOPLM           Set up WTO parm list.
         XC    FLAG,FLAG              Clear flag byte.
         XC    HOSTNML,HOSTNML        Set harcoded hostname len to 0.
*---------------------------------------------------------------------*
* Set up OPEN, DCB and DCBE macros.
*---------------------------------------------------------------------*
         MVC   GOPENIN,OPENIN         Copy OPEN parm list.
         MVC   GTEXTIN,TEXTIN         Copy DCB parm list.
         MVC   GEEXTIN,EEXTIN         Copy DCBE parm list.
         LA    R1,GEEXTIN             -> DCBE in dynamic storage.
         ST    R1,GTEXTIN             Store DCBE ptr in DCB parm list.
         LA    R1,GTEXTIN             POINT TO DCB
         STCM  R1,B'0111',GOPENIN+1   STORE PTR TO DCB IN OPEN LIST.
         ST    R1,GOPENIN+4           STORE PTR TO DCB IN OPEN LIST.
         OPEN  MF=(E,GOPENIN)         OPEN INPUT FILE.
         ST    R15,WRKF
         LTR   R15,R15                OPEN SUCCESSFUL?
         BZ    SETUPRT                YES, GO RETURN.
         LA    R1,OPENERR             -> Msg
         BAL   R14,MSG                Display it.
         MVI   CC,8                   Set bad CC.
SETUPRT  DS    0H
         MVC   GOPENOUT,OPENOUT       Copy OPEN parm list.
         MVC   GTEXTOUT,TEXTOUT       Copy DCB parm list.
         MVC   GEEXTOUT,EEXTOUT       Copy DCBE parm list.
         LA    R1,GTEXTOUT            -> DCB.
         STCM  R1,B'0111',GOPENOUT+1  Store ptr to DCB in open list.
         LA    R1,GEEXTOUT            ->DBCE
         ST    R1,GTEXTOUT            Store DCBE ptr in DCB list.
         MVI   SYSPOK,C'N'            Set SYSPRINT OPEN to N.
         OPEN  MF=(E,GOPENOUT)        Open output file.
*        DC    F'0'
         ST    R15,WRKF
         LTR   R15,R15                SYSPRINT OPEN OK?
         BNZ   BADSYSP                No, leave flag set at 'N'.
         MVI   SYSPOK,C'Y'            OK to write to SYSPRINT.
         WTO   'OUTPUT FILE OPENED'
BADSYSP  DS    0H
         BR    R6                     RETURN TO CALLER.
*---------------------------------------------------------------------*
* CKPARMS - Make sure all required parms were found in the PARMS file,
* and provide default values where possible for omitted parms.  Do
* any additional processing needed for parameters, such as converting
* zoned decimal to binary, etc.
*---------------------------------------------------------------------*
* For some parameters that are user coded, MSG the value coded with
* MSG26.
*---------------------------------------------------------------------*
CKPARMS  DS    0H
* Set up variable messages in working storage.
         MVC   MSG23H,MSG23L          Move length for WTO.
         MVC   MSG23W,MSG23           Set up "dftl taken' message.
         MVC   MSG26H,MSG26L          Move length for WTO.
         MVC   MSG26W,MSG26           Set up "parm coded' message.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* CNAME
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0001   DS    0H
         CLC   CNAME,BLANKS
         BNE   CK0001B
         MVC   CNAME,=CL8'RLG01'   Set default value.
         MVC   MSG23W+45(20),=CL20' CNAME: RLG01'
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
CK0001B  DS    0H
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* PRI
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0002   DS    0H
         CLC   PRI,BLANKS
         BNE   CK0002B
         MVC   PRI,=CL5'<035>'        Set default value.
         MVC   MSG23W+45(20),=CL20' PRI: <035>'
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
CK0002B  DS    0H
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* TIMESRC (Not currently used - for future use.)
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0003   DS    0H
         CLC   TIMESRC,BLANKS
         BNE   CK0003B
         MVC   TIMESRC,=CL8'MESSAGE'  Set default value.
         MVC   MSG23W+45(20),=CL20' TIMESRC: MESSAGE   '
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
CK0003B  DS    0H
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* QLIMIT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0004   DS    0H
         CLC   QLIMITN,BLANKS
         BNE   CK0004B
         MVC   QLIMITN,=CL12'524288'
         MVC   MSG23W+45(20),=CL20' QLIMIT: 524288     '
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
CK0004B  DS    0H
         STR   RJUST,QLIMITN,12    Right justify the field.
         PACK  WRKD,QLIMITN
         CVB   R2,WRKD
         ST    R2,QLIMIT           Store QLIMIT in binary.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* RETRYINT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0005   DS    0H
         CLC   RETRYINT,BLANKS
         BNE   CK0005B
         MVC   RETRYINT,=CL8'000015'
         MVC   MSG23W+45(20),=CL20' RETRYINT: 000015   '
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
CK0005B  DS    0H
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* RETRIES
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0006   DS    0H
         CLC   RETRIES,BLANKS
         BNE   CK0006B
         MVC   RETRIES,=CL4'0'
         MVC   MSG23W+45(20),=CL20' RETRIES: 0         '
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
CK0006B  DS    0H
         STR   RJUST,RETRIES,4     Right justify the string.
         PACK  WRKD,RETRIES        Convert to packed.
         CVB   R2,WRKD             Convert to binary.
         ST    R2,RETRIES          Store retries binary value.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* PORT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0007   DS    0H
         CLC   PORTN,BLANKS
         BNE   CK0007B
         MVC   PORTN,=CL8'514'
         MVC   MSG23W+45(20),=CL20' PORT: 514          '
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
         B     CK0007C
CK0007B  DS    0H                  User coded parm--display this one.
         MVC   MSG26W+28(40),BLANKS Clear variable part of message.
         MVC   MSG26W+28(06),=CL06' PORT:'
         MVC   MSG26W+35(8),PORTN  Move user coded PORT value.
         LA    R1,MSG26H           -> Msg
         BAL   R14,MSG             Display it.
CK0007C  DS    0H
         STR   RJUST,PORTN,8       Right justify the string.
         PACK  WRKD,PORTN          Convert to packed.
         CVB   R2,WRKD             Convert to binary.
         STH   R2,PORT             Store halfword
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* PROTO
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0008   DS    0H
         CLC   PROTO,BLANKS
         BNE   CK0008B
         MVC   PROTO,=CL4'UDP'
         MVC   MSG23W+45(20),=CL20' PROTO: UDP         '
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
CK0008B  DS    0H
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* SIZE
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0009   DS    0H
         CLC   SIZE,BLANKS
         BNE   CK0009B
         MVC   SIZE,=CL4'512'
         MVC   MSG23W+45(20),=CL20' SIZE: 512          '
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
CK0009B  DS    0H
         STR   RJUST,SIZE,4        Right justify the field.
         PACK  SIZED,SIZE          Convert to packed.
         CVB   R2,SIZED            Convert to binary.
         STH   R2,SIZEH            Store halfword
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* SERVER/SERVERIP (Must have one or the other, but not both).
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0010   DS    0H
         XC    SERVFLG,SERVFLG     Clear SERVER/SERVERIP flag.
         CLC   SERVER,BLANKS       SERVER blank?
         BE    CK0010Q             Yes, check SERVERIP.
         OI    SERVFLG,$SERVNAM    No, set flag bit to that effect.
CK0010Q  DS    0H                  Check SERVERIP
         CLC   SERVERIP,BLANKS     SERVERIP blank?
         BE    CK0010R             Yes, continue.
         OI    SERVFLG,$SERVNUM    No, set flag bit to that effect.
CK0010R  DS    0H                  Status of SERVER & SERVERIP coded?
         TM    SERVFLG,$SERVNAM+$SERVNUM
         BZ    CK0010S             Neither coded, go do error.
         BO    CK0010T             Both coded go do error.
         B     CK0010M             Only one coded - We're good.
*--- Neither SERVER nor SERVERIP - error.
CK0010S  DS    0H
         LA    R1,SRVNONE          -> Msg - Server name blank.
         BAL   R14,MSG             Display it.
         MVI   CC,8                Set error code.
         B     CK0010M             We're finished with this check.
*--- Both SERVER and SERVERIP - error.
CK0010T  DS    0H         Neither SERVER nor SERVERIP - error.
         LA    R1,SRVBOTH          -> Msg - Server ans Serverip coded.
         BAL   R14,MSG             Display it.
         MVI   CC,8                Set error code.
*        B     CK0010M             We're finished with this check.
CK0010M  DS    0H
         TM    SERVFLG,$SERVNUM    Server num (SERVERIP) coded?
         BO    CK0010M1            Yes, go say it.
         MVC   MSG26W+28(40),BLANKS Clear variable part of message.
         MVC   MSG26W+28(08),=CL8' SERVER:'
         MVC   MSG26W+37(40),SERVER Move user coded SERVER value.
         LA    R1,MSG26H           -> Msg
         BAL   R14,MSG             Display it.
         B     CK0010Z             Branch end of this routine.
CK0010M1 DS    0H
         MVC   MSG26W+28(40),BLANKS Clear variable part of message.
         MVC   MSG26W+28(10),=CL10' SERVERIP:'
         MVC   MSG26W+39(16),SERVERIP Move user coded SERVER value.
         LA    R1,MSG26H           -> Msg
         BAL   R14,MSG             Display it.
CK0010Z  DS    0H                  Done with SERVER/SERVERIP. Whew.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* ALERTPCT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0011   DS    0H
         CLC   ALERTPCT,BLANKS
         BNE   CK0011B
         MVC   ALERTPCT,=CL3'95'
         MVC   MSG23W+45(20),=CL20' ALERTPCT: 95       '
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
CK0011B  DS    0H
         STR   RJUST,ALERTPCT,3    Right justify the field.
         PACK  WRKD,ALERTPCT       Convert to packed.
         CVB   R2,WRKD             Convert to binary.
         STC   R2,ALERTPCN         Store byte.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* QRESUME
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0012   DS    0H
         CLC   ALERTPCT,BLANKS
         BNE   CK0012B
         MVC   QRESUME,=CL3'90'
         MVC   MSG23W+45(20),=CL20' QRESUME: 90        '
         LA    R1,MSG23H           -> Msg
         BAL   R14,MSG             Display it.
CK0012B  DS    0H
         STR   RJUST,QRESUME,3     Right justify the field.
         PACK  WRKD,QRESUME        Convert to packed.
         CVB   R2,WRKD             Convert to binary.
         STC   R2,QRESUMEN         Store byte.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* TRACE
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CK0013   DS    0H
         CLC   TRACE,BLANKS
         BNE   CK0013B
         MVC   TRACE,=CL1'N'
CK0013B  DS    0H
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* Return to caller.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         BR    R6
*---------------------------------------------------------------------*
* PARSE - A primitive parse routine that gets the length and addr
* of a value, given an input buffer record like this:
*
* SERVER   WWW.MYSRVR.COM
*      . . .
* PARMn    SOMEDATA
*
* ENTRY:
*    R0 - Length of buffer record to scan.
*    R1 - Points to start of buffer to scan.
*    R6 - Return address.
* EXIT:
*    PWK is a set of 4 pair of fullwords.  Word one of each pair is
*    the length of the token, and word 2 is the address of the token.
* Work:
*    R7 - Points to parse Work Area (PWK).
*---------------------------------------------------------------------*
PARSE    DS    0H
         STM   R7,R12,RSAVE1          Save callers regs 7-12.
         XC    PWK,PWK                Clear parse work area.
         LA    R7,PWK                 -> Parse work area.
         LR    R8,R1                  -> Start of data.
         LR    R9,R1                  -> Start of data.
         AR    R9,R0                  -> End of data.
*
* FIND FIRST NONBLANK CHAR.
*
PTOP1    DS    0H
         CLI   0(R8),C' '             First nonblank char yet?
         BNE   PTOP2                  Yes, find end of first token.
         LA    R8,1(R8)               Over 1.
         CR    R8,R9                  End of record yet?
         BNL   ENDREC                 Yes.
         B     PTOP1                  Top of loop 1.
PTOP2    DS    0H
*        DC    X'0000'
         ST    R8,0(R7)               Save ptr to token 1.
PTOP2B   DS    0H
         LA    R8,1(R8)               Over 1.
         CR    R8,R9                  End of record?
         BNL   ENDREC                 Yes, we're done.
         CLI   0(R8),C' '             No - Next blank yet?
         BNE   PTOP2B                 No, keep looking.
         LR    R2,R8                  Get current ptr.
         S     R2,0(R7)               Subtract origin to get len.
         ST    R2,4(R7)               Store length.
         LA    R7,8(R7)               Point to next PWK slot.
         B     PTOP1
ENDREC   DS    0H
         LM    R7,R12,RSAVE1          Restore callers regs 7-12.
         BR    R6                     Return to caller.
*---------------------------------------------------------------------*
* MACROS and constants.                                               *
*---------------------------------------------------------------------*
         LTORG
         CNOP  0,4
OPENIN   OPEN  (TEXTIN,INPUT),MF=L
         CNOP  0,4
TEXTIN   DCB   MACRF=(GM),DSORG=PS,LRECL=80,                           X
               DDNAME=PARMS,DCBE=*-*
LTEXTIN  EQU   *-TEXTIN
*
EEXTIN   DCBE  RMODE31=BUFF,EODAD=EOF
LEEXTIN  EQU   *-EEXTIN
WTOPLM   WTO   TEXT=,DESC=(7),MF=L   WTO parm list.
WTOPLL   EQU   *-WTOPLM
*
SVRBLNK  DC    CL50'Remote log server name not specified.  Exiting'
SVRNFND  DC    CL50'Remote log server lookup failed. Exiting'
APIERR   DC    CL50'Error initializing sockets API. Exiting'
RLCOMM1  RLCOMM CONST
*---------------------------------------------------------------------*
*   Private working storage.
*---------------------------------------------------------------------*
DATD     DSECT
SAVE     DS    18F                 Register save area.
*---------------------------------------------------------------------*
*   MACRO storage.
*---------------------------------------------------------------------*
         CNOP  0,4
GTEXTIN  DS    CL(LTEXTIN)         Macro storage.
         CNOP  0,4
GEEXTIN  DS    CL(LEEXTIN)         Macro storage.
         CNOP  0,4
GOPENIN  DS    F                   Macro storage.
         CNOP  0,4
WTOPL    DS    CL(WTOPLL)          WTO parm list.
         CNOP  0,4
WRKD     DS    D                   Doubleword work area.
WRKF     DS    D                   Fullword work area.
RR       DS    F                   Fullword work area.
*
* Storage for (partially) dynamic messages.
*
*
MSG21H   DS    AL2                 Message skeleton.
MSG21W   DS    CL(L'MSG21)
*
MSG23H   DS    AL2                 Message skeleton.
MSG23W   DS    CL(L'MSG23)
*
MSG26H   DS    AL2                 Message skeleton.
MSG26W   DS    CL(L'MSG26)
*
*---------------------------------------------------------------------*
*   End on doubleword boundary.                                       *
*---------------------------------------------------------------------*
         DS    0D
ENDDATD  EQU   *
DYNL     EQU   *-DATD
*---------------------------------------------------------------------*
*   Common Storage DSECT.                                             *
*---------------------------------------------------------------------*
         RLCOMM DSECT
         IKJCPPL
         END   RLINIT1
*---------------------------------------------------------------------*
*   PUNCH the linkedit control statements here.                       *
*---------------------------------------------------------------------*
         PUNCH ' SETCODE  AC(1)        '
         PUNCH ' ENTRY    RLINIT1      '
         PUNCH ' NAME     RLINIT1(R)   '
         END
