*---------------------------------------------------------------------*
* IPADDR  - MVS Remote Syslog Facility.                               *
*---------------------------------------------------------------------*
* Convert a text IP address to a fullword IP address.                 *
*---------------------------------------------------------------------*
* There are no doubt more elegant implementations of this function;   *
* Feel free to email me with yours.                                   *
*---------------------------------------------------------------------*
* RMTLOG Remote logging program copyright 2010-2017 John C. Miller.   *
*---------------------------------------------------------------------*
         GBLB  &NODEBUG
&NODEBUG SETB  0
IPADDR   CSECT
IPADDR   AMODE ANY
IPADDR   RMODE ANY
         PRINT GEN,DATA
         YREGS                      Do register equates.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* Prolog - Get private and common storage areas and set up.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         BAKR  R14,0                Save caller env.
         LR    R12,R15              Load base reg.
         USING IPADDR,R12           Addressability.
         MODID ,                    Eyecatcher.
         LR    R2,R1                Save R1 contents.
         STORAGE OBTAIN,LENGTH=DYNL Obtain private work area.
         LR    R13,R1               Load base reg.
         USING DATD,R13             DSECT addressability
         MVC   4(4,R13),=C'F1SA'    Indicate Fmt1 save area.
         ST    R2,R1SAVE            Save R1 contents.
         LR    R1,R2                Get original R1 for CPPL/PUTLINE.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* Get pointer to text IP address passed by caller.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         L     R3,0(R1)
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*             7        8     9     2              4      5(i)         *
*             v        v     v     v              v      v            *
* IPSTR:---> '80.81.82.83.....'    .... .... .... ....                *
*                                  IP1  IP2  IP3  IP4                 *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         MVC   IPSTR,0(R3)         Move user IP address.
*        MVC   IPSTR,=CL16' 80.81.82.83 '
         MVC   IPS,=XL16'F0'       Clear 4 target string octets.
         LA    R7,IPSTR            -> IP string.
         LA    R9,15(R7)           -> End of IP string.
         LR    R8,R9                    "
         LA    R4,IP4              -> Last IP target string.
         LA    R5,3                Load index register.
         LA    R2,IPS              -> Start of IP target strings.
IPTOP0   DS    0H
         CR    R8,R7               Done with all chars?
         BL    IPDONE              Yes, process last octet.
         CLI   0(R8),C' '          Spaces (end of IP not fnd yet)?
         BNE   IPTOP               No, end of ip was found, keep going.
         BCTR  R8,0                Back up one.
         B     IPTOP0              Top of loop.
IPTOP    DS    0H
         CR    R8,R7               Done with all chars?
         BL    IPDONE              Yes, process last octet.
         CLI   0(R8),C' '          Spaces (end of IP not fnd yet)?
         BE    IPDONE              Yes, leading space means we're done.
         CLI   0(R8),C'.'          '.' (end of octet)?
         BE    NEXTOCT             Yes, process octet.
         IC    R1,0(R8)            Get next character.
         STC   R1,0(R5,R4)         Store it.
         BCTR  R8,0                Back up one.
         BCTR  R5,0                Decrement index register.
         B     IPTOP               Top of loop.
NEXTOCT  DS    0H
         BCTR  R8,0                Back up past '.'
         LA    R5,3                Load index reg again.
         S     R4,=A(4)            POINT TO NEXT IP TARGET.
         CR    R4,R2               Done with all octets?
         BNL   IPTOP
IPDONE   DS    0H
         L     R1,IP1
         BAL   R11,CVB4            Convert a byte
         STC   R1,IPBYTE1
*---
         L     R1,IP2
         BAL   R11,CVB4            Convert a byte
         STC   R1,IPBYTE2
*---
         L     R1,IP3
         BAL   R11,CVB4            Convert a byte
         STC   R1,IPBYTE3
*---
         L     R1,IP4
         BAL   R11,CVB4            Convert a byte
         STC   R1,IPBYTE4
*---
         L     R2,IP
         ST    R2,0(R3)            Store binary IP addr in user stg.
*---------------------------------------------------------------------*
* Exit - Release storage and return to caller.                        *
*---------------------------------------------------------------------*
EXIT     DS    0H
         LR    R1,R13
         STORAGE RELEASE,LENGTH=DYNL,ADDR=(1)
         PR                        Return to caller.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*  Convert a 4 character, right justified number to hex.     Strg:    *
*  E.G.: C'  12' -> X'000C'                               WRKD  DS 0D *
*  Entry: R1 - Contains field to convert.                 WRKD1 DS F  *
*  Exit:  R1 -> 2 byte (halfword) text field.             WRKD2 DS F  *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
CVB4     DS    0H
         XC    WRKD,WRKD           Clear DBLWORD work field.
         ST    R1,WRKD2            Store chars to conver to wrk field.
         PACK  WRKD2,WRKD2         Make packed decimal.
         OI    WRKD2+3,X'0F'       Fix sign.
         CVB   R1,WRKD             Convert to binary.
         BR    R11
*---------------------------------------------------------------------*
*   Private working storage.
*---------------------------------------------------------------------*
DATD     DSECT                     Dynamic area.
SAVE     DS    18F                 Register save area.  Must be first
R1SAVE   DS    F
*---
IPSTR    DS    CL16
IP       DS    0F
IPBYTE1  DS    C
IPBYTE2  DS    C
IPBYTE3  DS    C
IPBYTE4  DS    C
UNPACK   DS    2F
IPS      DS    0CL16
IP1      DS    CL4
IP2      DS    CL4
IP3      DS    CL4
IP4      DS    CL4
DBL      DS    D
DBL2     DS    D
WRKD     DS    0D
WRKD1    DS    F
WRKD2    DS    F
WRKF     DS    F
*---------------------------------------------------------------------*
*   End on doubleword boundary.                                       *
*---------------------------------------------------------------------*
         DS    0D
ENDDATD  EQU   *
DYNL     EQU    *-DATD
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* DSECT mapping macros.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         END   IPADDR
*---------------------------------------------------------------------*
*   PUNCH the linkedit control statements here.                       *
*---------------------------------------------------------------------*
         PUNCH ' SETCODE  AC(1)        '
         PUNCH ' ENTRY    IPADDR       '
         PUNCH ' NAME     IPADDR(R)    '
         END
