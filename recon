*---------------------------------------------------------------------*
* RMTLOG  - MVS Remote Syslog Facility.                               *
*---------------------------------------------------------------------*
* RECON - Reconnect a broken connection.                              *
*---------------------------------------------------------------------*
* Entry (Called by RMTLOG):                                           *
* - R11 - Points to common storage area.  Use this for base reg.      *
* Regs:                                                               *
* - R12 - Base register for this program.                             *
* - R13 - Points to private storage area.                             *
*---------------------------------------------------------------------*
* 1) Shutdown current socket.                                         *
* 2) Close socket.                                                    *
* 3) Get new socket.                                                  *
* 4) Connect to host.                                                 *
*---------------------------------------------------------------------*
* 06/01/2010 John C. Miller - software@jmit.com                       *
*---------------------------------------------------------------------*
*
*=====================================================================*
* RMTLOG Remote logging program copyright 2010-2017 John C. Miller.   *
*---------------------------------------------------------------------*
* This program is free software: you can redistribute it and/or       *
* modify it under the terms of the GNU General Public License as      *
* published by the Free Software Foundation, either version 3 of      *
* the License, or (at your option) any later version.                 *
*                                                                     *
* This program is distributed in the hope that it will be useful,     *
* but WITHOUT ANY WARRANTY; without even the implied warranty of      *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
* GNU General Public License in member $GPL for more details.         *
*---------------------------------------------------------------------*
         GBLB  &NODEBUG
&NODEBUG SETB  0
         PRINT GEN,DATA
RECON    CSECT
RECON    AMODE ANY
RECON    RMODE ANY
         YREGS
*---------------------------------------------------------------------*
* Prolog - Get private and common areas, and get set up.
*---------------------------------------------------------------------*
         BAKR  R14,0                Save caller env.
         LR    R12,R15              Load base reg.
         USING RECON,R12            "
         MODID ,                    Eyecatcher.
         LR    R2,R1                Save R1 contents.
         STORAGE OBTAIN,LENGTH=DYNL Obtain private work area.
         LR    R13,R1               Load base reg.
         USING DATD,R13             DSECT addressability
         MVC   4(4,R13),=C'F1SA'    Indicate Fmt1 save area.
         USING RLCOMM,R11           Addressability to common area.
*        TPUT  =CL50'RECON-----------',50
*---------------------------------------------------------------------*
* SHUTSOC - Shut down socket.  The HOW variable is a fullword         *
* containing the type of shutdown: 1 = TO, 0 = FROM, 2 = BOTH.        *
* Don't error check.                                                  *
*---------------------------------------------------------------------*
SHUTSOC  DS    0H
         MVC   HOW,=F'2'           Set to close both directions.
         EZASMI TYPE=SHUTDOWN,     Shutdown.                           X
               S=S,                Socket.                             X
               HOW=HOW,            Mode (Both directions).             X
               ERRNO=ERRNO,        Output: ERRNO                       X
               RETCODE=RETCODE,    Output: RETCODE                     X
               ERROR=ERROR         Abend if Macro error
*        TPUT  =CL50'SHUTSOC',50
*---------------------------------------------------------------------*
* CLOSESC - Close socket and free resources.                          *
*---------------------------------------------------------------------*
CLOSESC  DS    0H
         EZASMI TYPE=CLOSE,        Close.                              X
               S=S,                Socket.                             X
               ERRNO=ERRNO,        Output: ERRNO                       X
               RETCODE=RETCODE,    Output: RETCODE                     X
               ERROR=ERROR         Abend if Macro error
*        TPUT  =CL50'CLOSESC',50
*---------------------------------------------------------------------*
* Obtain a TCP or UDP socket descriptor, depending on the PROTO parm. *
*---------------------------------------------------------------------*
SOCKET   DS    0H
         CLC   =C'UDP',PROTO       UDP protocol?
         BE    SOCKETUD            Yes, get a UDP socket.
SOCKETST DS    0H                  No, get a STREAM (TCP) socket.
         EZASMI TYPE=SOCKET,       Issue SOCKET macro.                 X
               AF='INET',          INET socket.                        X
               SOCTYPE='STREAM',   STREAM for TCP socket.              X
               ERRNO=ERRNO,        ERRNO output field.                 X
               RETCODE=RETCODE,    RETCODE output field.               X
               ERROR=ERROR         Go here on exit.
         B     CHECKSOK            Go check socket success.
SOCKETUD DS    0H                  No, get a STREAM (TCP) socket.
         EZASMI TYPE=SOCKET,       Issue SOCKET macro.                 X
               AF='INET',          INET socket.                        X
               SOCTYPE='DATAGRAM', DATAGRAM for UDP socket.            X
               ERRNO=ERRNO,        ERRNO output field.                 X
               RETCODE=RETCODE,    RETCODE output field.               X
               ERROR=ERROR         Go here on exit.
CHECKSOK DS    0H
*        TPUT  =CL50'SOCKET',50
         CLC   RETCODE,MINUSONE    Operation ok?
         BNE   SOCKOK              Yes, continue.
         B     EXIT8               Return with bad RC.
SOCKOK   DS    0H
         L     R8,RETCODE          Load RETCODE.
         STH   R8,S                Save socket num in comm strg.
*---------------------------------------------------------------------*
* Connect to server.                                                  *
*---------------------------------------------------------------------*
CONNECT  DS    0H
         MVC   FAMILY,=H'2'        Store family in sockt addr struct.
         MVC   PORT,=H'514'        Store port in sockt addr struct.
         EZASMI TYPE=CONNECT,                                          X
               S=S,                Stream.                             X
               NAME=NAME,          Socket name structure.              X
               ERRNO=ERRNO,        (Specify ERRNO field)               X
               RETCODE=RETCODE,    (Specify RETCODE field)             X
               ERROR=ERROR         Abend if Macro error
*        TPUT  =CL50'CONNECT',50
         CLC   RETCODE,MINUSONE    Operation ok?
         BNE   CONNOK              Yes, continue.
         B     EXIT8               Return with bad RC.
CONNOK   DS    0H
*---------------------------------------------------------------------*
* RETURN                                                              *
*---------------------------------------------------------------------*
ERROR    DS    0H
EXIT8    DS    0H
         MVI   CC,8                Set return code 8 (error).
         B     EXIT
EXIT0    DS    0H
         MVI   CC,0                Set zero (good) return code.
EXIT     DS    0H
         LR    R1,R13
         STORAGE RELEASE,LENGTH=DYNL,ADDR=(1)
         PR                        Return to caller.
*---------------------------------------------------------------------*
*   Constants.
*---------------------------------------------------------------------*
         RLCOMM CONST
*---------------------------------------------------------------------*
*   Private working storage.
*---------------------------------------------------------------------*
DATD     DSECT
SAVE     DS    18F                 Register save area.
*---------------------------------------------------------------------*
*   MACRO storage.
*---------------------------------------------------------------------*
WRKD     DS    D                   Doubleword work area.
WRKF     DS    D                   Fullword work area.
*
*---------------------------------------------------------------------*
*   End on doubleword boundary.                                       *
*---------------------------------------------------------------------*
         DS    0D
ENDDATD  EQU   *
DYNL     EQU   *-DATD
*---------------------------------------------------------------------*
*   Common Storage DSECT.                                             *
*---------------------------------------------------------------------*
         RLCOMM DSECT
         IKJCPPL
         END   RECON
*---------------------------------------------------------------------*
*   PUNCH the linkedit control statements here.                       *
*---------------------------------------------------------------------*
         PUNCH ' SETCODE  AC(1)        '
         PUNCH ' ENTRY    RECON        '
         PUNCH ' NAME     RECON(R)     '
         END
